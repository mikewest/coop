<pre class='metadata'>
Title: Cross-Origin Opener Policy
Shortname: coop
Level: 1
Status: DREAM
Editor: Mike West 56384, Google Inc., mkwst@google.com
Markup Shorthands: markdown yes
!Version History: <a href="[REPOSITORYURL]">[REPOSITORY]</a>
Issue Tracking: whatwg/html topic: cross-origin-opener-policy https://github.com/whatwg/html/labels/topic%3A%20cross-origin-opener-policy
Boilerplate: repository-issue-tracking off
Abstract:
    This document defines a `Cross-Origin-Opener-Policy` mechanism, which gives developers the
    ability to isolate pages from their openers, and potentially from documents they themselves
    open. This isolation allows developers to defend themselves against direct abuse of an
    `opener` relationship, and to provide user agents with explicit hints about the ways in which
    pages can be split across processes to mitigate side-channel attacks in a post-Spectre world.
</pre>
<pre boilerplate="copyright">&copy;2019, Google, Inc. All rights reserved.</pre>

<pre class="biblio">
{
  "COEP": {
    "authors": [ "Mike West" ],
    "href": "https://mikewest.github.io/corpp/",
    "title": "Cross-Origin Embedder Policy"
  },

  "spectre": {
    "authors": [
      "Paul Kocher", "Jann Horn", "Anders Fogh", "Daniel Genkin", "Daniel Gruss", "Werner Haas", "Mike Hamburg", "Moritz Lipp", "Stefan Mangard", "Thomas Prescher", "Michael Schwarz", "Yuval Yarom"
    ],
    "href": "https://spectreattack.com/spectre.pdf",
    "title": "Spectre Attacks: Exploiting Speculative Execution"
  },

  "chromium-post-spectre-rethink": {
    "authors": [ "The Chromium Project" ],
    "href": "https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md",
    "title": "Post-Spectre Threat Model Re-Think"
  },

  "I-D.ietf-httpbis-header-structure": {
    "authors": [ "Mark Nottingham", "Poul-Henning Kamp" ],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-header-structure",
    "title": "Structured Headers for HTTP",
    "status": "ID",
    "publisher": "IETF"
  }
}
</pre>

<pre class="anchors">
urlPrefix: https://tc39.es/ecma262/; spec: ECMAScript
    text: SharedArrayBuffer; type: interface; url: sec-sharedarraybuffer-objects
urlPrefix: https://tools.ietf.org/html/draft-ietf-httpbis-header-structure; spec: I-D.ietf-httpbis-header-structure
    type: dfn
        text: structured header; url: #
    for: structured header
        type: dfn
            text: dictionary; url: #section-3.1
            text: token; url: #section-3.9
            text: boolean; url: #section-3.11
    type: grammar
        text: sh-param-list; url: #section-3.4
    type: abstract-op
        text: serialize Structured Header; url: #section-4.1
        text: Structured Header parsing algorithm; url: #section-4.2.7
urlPrefix: https://html.spec.whatwg.org/
    type: dfn
        text: top-level browsing context group; url: multipage/browsers.html#tlbc-group
    type: abstract-op
        text: initialize the Document object; url: multipage/browsing-the-web.html#initialise-the-document-object
        text: create a new browsing context; url: multipage/browsers.html#creating-a-new-browsing-context
        text: run a worker; url: multipage/workers.html#run-a-worker
        text: process a navigate response; url: multipage/browsing-the-web.html#process-a-navigate-response
urlPrefix: https://mikewest.github.io/corpp/; spec: COEP
    type: dfn
        text: embedder policy; for: document; url: #document-embedder-policy
</pre>

<pre class="link-defaults">
spec:fetch; type:dfn; for:/; text:request
spec:fetch; type:dfn; text: cors check
spec:url; type:dfn; for:/; text:url
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:dfn; text:environment
spec:html; type:dfn; text: browsing context group
spec:fetch; type:dfn; for:/; text:response
spec:fetch; type:dfn; for:/; text:cross-origin resource policy check
spec:html; type:dfn; for:/; text:global object
</pre>

Introduction {#intro}
=====================

[[COEP]]
[[spectre]]
[[chromium-post-spectre-rethink]]

TODO(mkwst): Write an introduction.


Framework {#framework}
======================

The `Cross-Origin-Opener-Policy` HTTP Response Header {#COOP}
----------------------------------------------------------------

The <dfn http-header>`Cross-Origin-Opener-Policy`</dfn> HTTP response header field allows a
server to declare a [=document/cross-origin opener-policy=] for the response delivered for a given
top-level navigation, which governs the [=browsing context group=] into which the navigation's
target [=browsing context=] is placed.

<a http-header>`Cross-Origin-Opener-Policy`</a> is a [=Structured Header=] whose value MUST be a
[=structured header/parameterized list=]. [[!I-D.ietf-httpbis-header-structure]] Its ABNF is:

```
Cross-Origin-Opener-Policy = sh-param-list
```

ISSUE(httpwg/http-extensions#839): Parameterized lists are (maybe?) going away in favor of regular
ol' Lists. 

The header's vaue MUST consist of a single item whose name asserts a particular
[=document/cross-origin opener-policy=]. Currently, only the following names are defined:
"`same-origin`", "`same-site`", and "`unsafe-inherit`".

This item MAY have a single, valueless parameter named "`unsafe-allow-outgoing`".

In order to support forward-compatibility with as-yet-unknown declarations, user agents MUST ignore
this header if it contains an invalid value. Likewise, user agents MUST ignore this header if the
value cannot be parsed as a <a grammar>`sh-param-list`</a>. The header is also ignored for
non-[=navigation requests=], and for [=navigation requests=] that do not target a top-level
browsing context.

<div class="example">
The following are all examples of valid header definitions:

:   `Cross-Origin-Opener-Policy: same-origin`
::  A top-level document which asserts this header can be placed into the same [=browsing context
    group=] as its opener only if the opener is [=same origin=] with the new document. 

:   `Cross-Origin-Opener-Policy: same-site`
::  A top-level document which asserts this header can be placed into the same [=browsing context
    group=] as its opener only if the opener is [=host/same site=] with the new document.

:   `Cross-Origin-Opener-Policy: unsafe-inherit`
::  A top-level document which asserts this header can be placed into the same [=browsing context
    group=] with any document.

Note: The [=browsing context group=] selection depends upon both the [=document/cross-origin
opener-policy=] and the [=document/embedder policy=] of both the 
</div>


Parsing {#parsing}
------------------

<div algorithm="parsing the header">
To <dfn abstract-op local-lt="parse header">obtain a response's embedder policy</dfn> given a
[=response=] (|response|):

1.  Let |policy| be "`none`".

2.  Let |header| be the result of [=header list/getting=] `Cross-Origin-Embedder-Policy` from
    |response|'s [=response/header list=].

3.  If |header| is not `null`:

    1.  Set |header| to the result of [=isomorphic decoding=] |header|.

    2.  Let |parsed policy| be the result of executing the [$Structured Header parsing algorithm$]
        with <var ignore>input_string</var> set to |header|, and <var ignore>header_type</var> set
        to "`item`".

        If parsing fails, set |parsed policy| to "`none`".

        ISSUE: Not sure if this is the right integration between Fetch's understanding of header
        values and Structured Headers. For example, the latter requires an ASCII string, the former
        decodes an ~arbitrary byte sequence.

        ISSUE(httpwg/http-extensions#662): The ASCII requirements of Structured Headers are
        somewhat unclear to me. Do we need to check whether |header| is an [=ASCII string=] before
        passing it into the parsing algorithm?

    3.  If |parsed policy| is "`require-corp`", set |policy| to "`require-corp`".

4.  Return |policy|.

<div class="note">
Note: This fails open (by defaulting to "`none`") in the presence of a header that cannot be
parsed as a [=structured header/token=]. This includes inadvertant lists created by combining
multiple instances of the `Cross-Origin-Embedder-Policy` header present in a given response:

<table class="data">
  <thead>
    <tr>
      <th>`Cross-Origin-Embedder-Policy`</th>
      <th>Final Policy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>No header delivered</em></td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp`</td>
      <td>`require-corp`</td>
    </tr>
    <tr>
      <td>`unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp, unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`unknown-value, unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`unknown-value, require-corp`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp, require-corp`</td>
      <td>`none`</td>
    </tr>
  </tbody>
</table>
</div>

</div>


Integrations {#integrations}
============================

Integration with HTML {#integration-html}
-----------------------------------------

When creating a document, user agents will process
<a http-header>`Cross-Origin-Embedder-Policy`</a> headers delivered by the server, imposing any
restrictions it asserts. Likewise, user agents MUST also take into account the embedder policy
asserted by the document's opener or embedder, ensuring that they're properly imposed as well. To do
so, HTML is patched as follows:

1.  An <dfn>embedder policy</dfn> is a string with one of the following values: "`none`",
    "`require-corp`".

2.  The [=/embedder policy=] is persisted on a number of objects:

    1.  {{Document}} objects are given an <dfn for="document">embedder policy</dfn> property, whose
        value is an [=/embedder policy=] defaulting to "`none`".

    2.  {{WorkerGlobalScope}} objects are given a <dfn for="WorkerGlobalScope">embedder
        policy</dfn> property, whose value is an [=/embedder policy=] defaulting to "`none`".

    3.  [=Environment settings objects=] are given a <dfn for="environment settings object">embedder
        policy</dfn> accessor, which has the following implementations:

        :   For {{Window}} objects:
        ::  Return the [=document/embedder policy=] of <var ignore>window</var>'s
            [=associated Document=].
        :   For {{WorkerGlobalScope}} objects:
        ::  Return <var ignore>worker global scope</var>'s [=WorkerGlobalScope/embedder policy=].

3.  The [$create a new browsing context$] algorithm sets the [=document/embedder policy=] for
    a browsing context's initial `about:blank` document by adding a new step directly after Referrer
    Policy is initialized in step 11 of the existing algorithm  which will copy any
    <var ignore>creator</var> document's policy:

        > 12.  If <var ignore>creator</var> is not null, set <var ignore>document</var>'s
        >      [=document/embedder policy=] to <var ignore>creator</var>
        >      [=document/embedder policy=].

4.  The [$initialize the Document object$] algorithm sets the [=document/embedder policy=] for
    {{Document}}s to which a [=browsing context=] is navigated by adding a new step directly after
    Referrer Policy is initialized in step 6:

    > 7.  Call [$initialize a Document's embedder policy from a response$] given
    >     <var ignore>document</var> and <var ignore>response</var>.

5.  The [$run a worker$] algorithm sets the [=WorkerGlobalScope/embedder policy=] for
    {{WorkerGlobalScope}} objects by adding a new step directly after Referrer Policy is initialized
    in step 12.5:

    > 6.  Call [$initialize a global object's embedder policy from a response$] given
    >     <var ignore>worker global scope</var> and <var ignore>response</var>.

6.  The [$process a navigate response$] algorthm checks that documents nested in a `require-corp`
    context themselves positively assert `require-corp` by adding a new condition to the list in
    step 1:

    > *   The [$process navigation response|check a navigation response's adherence to its
    >     embedder's policy$] algorithm returns "`Blocked`" when executed upon
    >     <var ignore>response</var> and <var ignore>browsingContext</var>.

### Initializing a `Document`'s Embedder policy ### {#initialize-embedder-policy-for-document}

<div algorithm="to initialize a Document's embedder policy from a response">
To <dfn abstract-op>initialize a Document's embedder policy from a response</dfn>, given a
{{Document}} object (|document|) and a [=response=] (|response|):

1.  Let |policy| be the result of [$parse header|obtaining an embedder policy$] from |response|.

2.  If |document|'s [=browsing context=] is an [=auxiliary browsing context=]:

    1.  If the [=active document=] of |document|'s [=browsing context=]'s
        [=opener browsing context=]'s [=document/embedder policy=] "`require-corp`", set |policy|
        to "`require-corp`".

3.  Set |document|'s [=document/embedder policy=] to |policy|.

</div>

ISSUE: We might not need to inhert the COEP state into auxiliary frames, if we can rely on COOP
to do the right thing with regard to process isolation for top-level windows.

<div class="example">
If `https://example.com/` is loaded as a non-auxiliary top-level document, its
[=document/embedder policy=] will vary based upon the `Cross-Origin-Embedder-Policy` header
it includes. That is:

<table class="data">
  <thead>
    <tr>
      <th>`Cross-Origin-Embedder-Policy`</th>
      <th>Final Policy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>No header delivered</em></td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp`</td>
      <td>`require-corp`</td>
    </tr>
    <tr>
      <td>`unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp, unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`unknown-value, unknown-value`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`unknown-value, require-corp`</td>
      <td>`none`</td>
    </tr>
    <tr>
      <td>`require-corp, require-corp`</td>
      <td>`none`</td>
    </tr>
  </tbody>
</table>
</div>

### Initializing a global object's Embedder policy ### {#initialize-embedder-policy-for-global}

<div algorithm="to initialize a global object's embedder policy from a response">
To <dfn abstract-op>initialize a global object's embedder policy from a response</dfn>, given a
[=global object=] (|global|) and a [=response=] (|response|):

1.  Let |policy| be "`none`".

2.  Let |response policy| be the result of [$parse header|obtaining an embedder policy$] from
    |response|.

3.  Run the steps corresponding to the first matching statement:

    :   |response|'s [=response/url=]'s [=url/scheme=] is a [=local scheme=]
    :   |global| is a {{DedicatedWorkerGlobalScope}}:
    ::  1.  For each of the items in |global|'s [=WorkerGlobalScope/owner set=]:
    
            1.  If the item's [=/embedder policy=] is "`require-corp`", set |policy| to
                "`require-corp`".

    :   |global| is a {{SharedWorkerGlobalScope}}:
    ::  1.   Set |policy| to |response policy|.

        2.  For each of the items in |global|'s [=WorkerGlobalScope/owner set=]:
    
            1.  If the item's [=/embedder policy=] is "`require-corp`", set |policy| to
                "`require-corp`".

        ISSUE: Is this the right model for {{SharedWorker}}? See also the questions around
        {{ServiceWorker}} below.

    :   |global| is a {{ServiceWorkerGlobalScope}}:
    ::  1.   Set |policy| to |response policy|.

        ISSUE: Do we need to ensure that {{ServiceWorker}} can't have a distinct COEP from pages
        it controls? Do we need to inherit the {{ServiceWorker}}'s policy into documents it
        controls? Would it be enough to ensure that we perform a CORP check when delivering a
        resource from the service worker to a document?

4.  Set |global|'s [=WorkerGlobalScope/embedder policy=] to |policy|.

</div>

### Process a navigation response ### {#process-navigation-response}

<div algorithm="process a navigation response">
If a document's [=document/embedder policy=] is "`require-corp`", then any document it embeds in a
[=nested browsing context=] must positively assert a "`require-corp`" [=/embedder policy=] (see
[[#cascade-vs-require]]).

To <dfn abstract-op lt="process navigation response">check a navigation response's adherence to its
embedder's policy</dfn> given a [=response=] (|response|), and a target [=browsing context=]
(|target|), execute the following steps, which will return "`Allowed`" or "`Blocked`" as
appropriate:

1.  Return "`Allowed`" if any of the following statements are true:

    *   |target| is not a [=nested browsing context=].
    *   The {{Document}} [=nested through|through which=] |target| is nested has an
        [=document/embedder policy=] of "`none`".
    *   The result of [$parse header|obtaining an embedder policy$] from |response| is
        "`require-corp`".

2.  Return "`Blocked`".

</div>

Integration with Fetch {#integration-fetch}
-------------------------------------------

When fetching resources, user agents should examine both the [=request=]'s [=request/client=] and
[=request/reserved client=] to determine the applicable [=/embedder policy=], and apply any constraints that policy expresses
to incoming responses. To do so, Fetch is patched as follows:

1.  The `Cross-Origin-Resource-Policy` grammar is extended to include a "`cross-site`" value.

2.  The [$cross-origin resource policy check$] is rewritten to take the [=/embedder policy=] into
    account, and to cover some [=navigation requests=] in addition to `no-cors` requests.

3.  ISSUE: The [$cross-origin resource policy check$] needs to be performed _after_ the relevant
    service worker has the opportunity to respond to a request, as it may otherwise be allowed to
    respond to a `require-corp` [=request/client=] with an opaque response which doesn't assert
    CORP.

### Cross-Origin Resource Policy Checks ### {#corp-check}

To perform a <dfn abstract-op>cross-origin resource policy check</dfn> given a [=request=]
(|request|) and a [=response=] (|response|), run these steps:

1.  Let |embedder policy| be "`require-corp`".

2.  Set |embedder policy| to "`none`" if both of the following statements are true:

    *    |request|'s [=request/client=]'s [=environment settings object/embedder policy=] is
         "`none`".
    *    |request|'s [=request/reserved client=] is not `null`, and its
         [=environment settings object/embedder policy=] is "`none`".


3.  Return `allowed` if any of the following statements are true:

    *    |request|'s [=request/mode=] is "`same-origin`", "`cors`", or "`websocket`".
    *    |request|'s [=request/mode=] is "`navigate`", and |embedder policy| is "`none`".

4.  ASSERT: |request|'s [=request/mode=] is "`no-cors`" or "`navigate`". If |request|'s
    [=request/mode=] is "`navigate`", |embedder policy| is "`require-corp`".

5.  Let |policy| be the result of [=header list/getting=] `Cross-Origin-Resource-Policy` from
    |response|'s [=response/header list=].

6.  If |policy| is `null`, and |embedder policy| is "`require-corp`", set |policy| to
    "`same-origin`".

7.  Switch on |policy| and run the associated steps:

    :   `null`
    :   `cross-origin`
    ::  Return `allowed`.

    :   `same-origin`
    ::  If |request|'s [=request/origin=] is [=same origin=] with |request|'s
        [=request/current URL=]'s [=url/origin=], then return `allowed`.

    :   `same-site`
    ::  If both of the following statements are true, then return `allowed`:
    
        *   |request|'s [=request/origin=]'s [=origin/host=] is [=same site=] with |request|'s
            [=request/current URL=]'s [=url/origin=]'s [=origin/host=].
        *   |request|'s [=request/origin=]'s [=origin/scheme=] is "`https`", or |response|'s
            [=response/HTTPS state=] is "`none`".

        Otherwise, return `blocked`.

        Note: `Cross-Origin-Resource-Policy: same-site` does not consider a response delivered
        via a secure transport to match a non-secure requesting origin, even if their hosts are
        otherwise [=same site=]. Securely-transported responses will only match a
        securely-transported initiator.

    :   Otherwise
    ::  Return `allowed`.

Implementation Considerations {#impl-considerations}
====================================================

Why not require CORS instead? {#why-not-cors}
---------------------------------------------

An earlier version of this propsal leaned on CORS rather than CORP. Why didn't we run with that
model instead?

This proposal posits that there's a meaningful distinction between a server's assertions that "You,
vague acquaintance, may embed me." and "You, dearest friend, may read me."
`Cross-Origin-Resource-Policy` grants no explicit access to a resources' content, unlike CORS, and
seems like it's just good-enough to support the explicit declaration of embeddableness that this
proposal requires. CORS goes further, and especially in the short-term it seems that there's real
risk in developers blindly enabling CORS in order to meet the embedding requirements we want to
impose here, opening themselves up to direct attack in the process.

That is, it seems likely that some subset of developers would implement a CORS requirement in the
simplest way possible, by reflecting the `Origin` header in an `Access-Control-Allow-Origin` header.
If these resources contain interesting data about users (as advertisements, for example, are wont to
do), then it's possible that data will end up being more widely available than expected.

CORP does not create the same risk. It seems strictly lower-privilege than CORS, and a reasonable
place for us to start.

Forward-compatibility {#forward-compat}
---------------------------------------

The header defined in this document is small and single-purpose, which is a real advantage for
comprehensibility. I wonder, however, if an extensible alternative would be reasonable. For
example, if we're serious about moving to credentialless requests, it would be annoying to do so by
defining yet another header. Perhaps something more generic that accepts a
[=structured header/dictionary=] rather than a single token? That is:

```
Embedee-Policy: opt-in=required, credentials=cors-only
```

Perhaps it will be possible to do everything we want by defining a new tokens, but I worry a bit
that we'll follow [[Referrer-Policy]] into some pretty convoluted token names if we go that route.
Splitting out the axes along which we'd like to make decisions seems like it might be a good
strategy to consider.

Cascading vs. requiring embedder policies {#cascade-vs-require}
---------------------------------------------------------------

An earlier version of this proposal called for a nested document's [=document/embedder policy=] to
be inherited from its parent. This would ensure that a document that asserted `require-corp` would
require its framed children to do the same.

We decided that this is the wrong model to start with. Instead, we now require the framed document
itself to assert `Cross-Origin-Embedder-Policy: require-corp`, and block the load if it doesn't.
That seems safer, insofar as it would give the embedder less control over the embedee's state. It
also ensures that the embedee's developer would always see consistent behavior in the given document
no matter whether its loaded as a frame or as a top-level document.

This might be a requirement we can relax in the future, as it does have potential implications for
eventual deployment. It makes sense to begin with the requirement, however, as loosening constraints
is significantly simpler than imposing new constraints in the future.
